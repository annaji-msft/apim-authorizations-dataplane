<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-variable name="providerId" value="@(context.Request.MatchedParameters["providerId"])" />
		<set-variable name="authorizationId" value="@(context.Request.Headers.GetValueOrDefault("authorizationId", ""))" />
		<set-variable name="postLoginRedirectUrl" value="@(context.Request.Headers.GetValueOrDefault("postLoginRedirectUrl", ""))" />
		<set-variable name="authorizationArmId" value="@("https://management.azure.com/subscriptions/{{SubscriptionId}}/resourceGroups/{{ResourceGroupId}}/providers/Microsoft.ApiManagement/service/{{ServiceId}}/authorizationProviders/" + ((string)context.Variables["providerId"]) + "/authorizations/" + ((string)context.Variables["authorizationId"]))" />
		<send-request mode="new" response-variable-name="authorizationResult" timeout="20" ignore-error="true">
			<set-url>@{
                return ((string)context.Variables["authorizationArmId"]) + "?api-version={{ARMAPIVersion}}";
            }</set-url>
			<set-method>GET</set-method>
			<authentication-managed-identity resource="https://management.azure.com/" />
		</send-request>
		<choose>
			<when condition="@(((IResponse)context.Variables["authorizationResult"]).StatusCode == 404)">
				<send-request mode="new" response-variable-name="authorizationCreatedResult" timeout="20" ignore-error="true">
					<set-url>@{
                        return ((string)context.Variables["authorizationArmId"]) + "?api-version={{ARMAPIVersion}}";
                    }</set-url>
					<set-method>PUT</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>@{
                                return JsonConvert.SerializeObject(new { properties = new { authorizationType = "oauth2", oauth2grantType = "authorizationCode" } });
                    }</set-body>
					<authentication-managed-identity resource="https://management.azure.com/" />
				</send-request>
				<choose>
					<when condition="@(((IResponse)context.Variables["authorizationCreatedResult"]).StatusCode == 200)">
						<send-request mode="new" response-variable-name="getLoginLinksResult" timeout="20" ignore-error="true">
							<set-url>@{
                                return ((string)context.Variables["authorizationArmId"]) + "/getLoginLinks?api-version={{ARMAPIVersion}}";
                            }</set-url>
							<set-method>POST</set-method>
							<set-header name="Content-Type" exists-action="override">
								<value>application/json</value>
							</set-header>
							<set-body>@{
                                return JsonConvert.SerializeObject(new { postLoginRedirectUrl =  ((string)context.Variables["postLoginRedirectUrl"]) });
                            }</set-body>
							<authentication-managed-identity resource="https://management.azure.com/" />
						</send-request>
						<return-response>
							<set-status code="401" reason="Unauthorized" />
							<set-body>@{
                                var response = ((IResponse)context.Variables["getLoginLinksResult"]).Body.As<JObject>();
                                return response["loginLink"].ToString();
                            }</set-body>
						</return-response>
					</when>
					<otherwise />
				</choose>
			</when>
			<when condition="@(((IResponse)context.Variables["authorizationResult"]).StatusCode == 200 && ((string)(((IResponse)context.Variables["authorizationResult"]).Body.As<JObject>()["properties"]["status"])).ToUpper().Equals("ERROR") )">
				<send-request mode="new" response-variable-name="getLoginLinksResult" timeout="20" ignore-error="true">
					<set-url>@{
                                return ((string)context.Variables["authorizationArmId"]) + "/getLoginLinks?api-version={{ARMAPIVersion}}";
                            }</set-url>
					<set-method>POST</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>@{
                                return JsonConvert.SerializeObject(new { postLoginRedirectUrl =  ((string)context.Variables["postLoginRedirectUrl"]) });
                            }</set-body>
					<authentication-managed-identity resource="https://management.azure.com/" />
				</send-request>
				<return-response>
					<set-status code="401" reason="Unauthorized" />
					<set-body>@{
                                var response = ((IResponse)context.Variables["getLoginLinksResult"]).Body.As<JObject>();
                                return response["loginLink"].ToString();
                            }</set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response>
					<set-status code="200" />
					<set-body>Success!</set-body>
				</return-response>
			</otherwise>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>